class NumMatrix {
    int[][] dp;
    boolean isEmpty = false;
    public NumMatrix(int[][] matrix) {
        /*
            this function is to initalize the 2-dimentional array, dp[i][j].
            dp[i][j] stands for the sum of matrix[i][j] for i and j ranging [0, i] , [0, j] respectively.
        */
        if (matrix == null) {
            isEmpty = true;
            return;
        }
        int rowLen = matrix.length;
        if (rowLen == 0) {
            isEmpty = true;
            return;            
        }
            
        int colLen = matrix[0].length;
        dp = new int[rowLen][colLen];

        dp[0][0] = matrix[0][0];

        for (int i=0; i<rowLen; ++i) {
            for (int j=0; j<colLen; ++j) {
                if (j == 0) {
                    if (i == 0) dp[i][j] = matrix[i][j];
                    else dp[i][j] = dp[i-1][j] + matrix[i][j];
                    continue;
                }
                if (i == 0) dp[i][j] = dp[i][j-1] + matrix[i][j];
                else {
                    int temp = dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1];
                    dp[i][j] = temp + matrix[i][j];
                }
            }
        }

    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        if (isEmpty == true) return 0;
        if (row1 == 0 && col1 == 0) return dp[row2][col2];
        
        if (row1 == 0) {
            return dp[row2][col2]-dp[row2][col1-1];
        } else if (col1 == 0) {
            return dp[row2][col2]-dp[row1-1][col2];
        } else {
            int toBeSubtracted = dp[row2][col1-1]-dp[row1-1][col1-1];
            return dp[row2][col2]-dp[row1-1][col2]-toBeSubtracted;
        }
    }
}
