class Solution {
    private int[] arr = new int[10010];

    public List<Integer> eventualSafeNodes(int[][] graph) {
        boolean[] isNotSafe = new boolean[graph.length];
        List<Integer> L = new ArrayList<>();

        for (int i=0; i<graph.length; ++i) {
            if (arr[i] == -1) continue;

            arr[i] = 2;
            boolean rel = isSafe(i, graph, isNotSafe);
            if (rel == false) arr[i] = -1;
            if (arr[i] != -1) L.add(i);
            if (arr[i] == 2) arr[i] = 1;
        }

        return L;
    }

    public boolean isSafe (int start, int[][] graph, boolean[] isSafe) {
        int Len = graph[start].length;
        for (int i=0; i<Len; ++i) {
            if (arr[graph[start][i]] == 2) return false;
            if (arr[graph[start][i]] == 1) continue;

            arr[graph[start][i]] = 2;
            boolean rel = isSafe(graph[start][i], graph, isSafe);
            if (rel == false) {
                arr[graph[start][i]] = -1;
                return false;
            } else {
                arr[graph[start][i]] = 1;
            }
        }

        return true;
    }
}
