import java.util.*;

public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null) return 0;
        if ((matrix.length == 0) || (matrix[0].length == 0)) return 0;

        int[][] dp = new int[matrix.length][matrix[0].length];

        for (int i=0; i<dp.length; ++i) Arrays.fill(dp[i], -1);

        int result = 0;
        for (int row=0; row<matrix.length; ++row) {
            for (int col=0; col<matrix[row].length; ++col) {
                if (dp[row][col] == -1) {
                    int temp = helper(matrix, row, col, dp)+1;
                    dp[row][col] = temp-1;
                }
                if ((dp[row][col]+1) > result) result = dp[row][col]+1;
            }
        }
        return result;
    }

    public int helper (int[][] matrix, int startX, int startY, int[][] dp) {
        int up=0, down=0, left=0, right=0;

        int curVal = matrix[startX][startY];
        if ((startX-1) >= 0) {
            if (curVal < matrix[startX-1][startY]) {
                if (dp[startX-1][startY] != -1) up = dp[startX-1][startY]+1;
                else up = helper(matrix, startX-1, startY, dp)+1;
            }
        }
        if ((startX+1) < matrix.length) {
            if (curVal < matrix[startX+1][startY]) {
                if (dp[startX+1][startY] != -1) down = dp[startX+1][startY]+1;
                else down = helper(matrix, startX+1, startY, dp)+1;
            }
        }
        if ((startY-1) >= 0) {
            if (curVal < matrix[startX][startY-1]) {
                if (dp[startX][startY-1] != -1) left = dp[startX][startY-1]+1;
                else left = helper(matrix, startX, startY-1, dp)+1;
            }
        }
        if ((startY+1) < matrix[0].length) {
            if (curVal < matrix[startX][startY+1]) {
                if (dp[startX][startY+1] != -1) right = dp[startX][startY+1]+1;
                else right = helper(matrix, startX, startY+1, dp)+1;
            }
        }

        int max = Math.max(Math.max(up, down), Math.max(left, right));
        dp[startX][startY] = max;

        return max;
    }
//    public static void main(String args[]) {
////        int[][] nums = {{9,9,4}, {6,6,8}, {2,1,1}};
//        int[][] nums = {{3,4,5}, {3,2,6}, {2,2,1}};
//        test myTest = new test();
//        System.out.println(myTest.longestIncreasingPath(nums));
//    }
}

public class MainClass {
    public static int[] stringToIntegerArray(String input) {
        input = input.trim();
        input = input.substring(1, input.length() - 1);
        if (input.length() == 0) {
          return new int[0];
        }
    
        String[] parts = input.split(",");
        int[] output = new int[parts.length];
        for(int index = 0; index < parts.length; index++) {
            String part = parts[index].trim();
            output[index] = Integer.parseInt(part);
        }
        return output;
    }
    
    public static int[][] stringToInt2dArray(String input) {
        JsonArray jsonArray = JsonArray.readFrom(input);
        if (jsonArray.size() == 0) {
          return new int[0][0];
        }
    
        int[][] arr = new int[jsonArray.size()][];
        for (int i = 0; i < arr.length; i++) {
          JsonArray cols = jsonArray.get(i).asArray();
          arr[i] = stringToIntegerArray(cols.toString());
        }
        return arr;
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            int[][] matrix = stringToInt2dArray(line);
            
            int ret = new Solution().longestIncreasingPath(matrix);
            
            String out = String.valueOf(ret);
            
            System.out.print(out);
        }
    }
}
