/*
Given an array of integers, find out whether there are two distinct indices i and j in the array 
such that the absolute difference between nums[i] and nums[j] is at most t and 
the absolute difference between i and j is at most k.

Example 1:

Input: [1,2,3,1], k = 4, t = 0
Output: true
Example 2:

Input: [1,0,1,1], k = 1, t = 0
Output: true
Example 3:

Input: [4,2], k = 2, t = 1 
Output: false

My solution:
*/

class Solution {
    class str {
        public int index;
        public int value;
        public int compareTo(str s2) {
            if (this.value < s2.value) return -1;
            return 1;
        }
    }

    public boolean containsNearbyAlmostDuplicate(int[] num, int k, int t) {
        int len = num.length;
        str[] strt = new str[len];
        for (int i = 0; i < len; ++i) {
            strt[i] = new str();
        }

        for (int i = 0; i < len; ++i) {
            strt[i].value = num[i];
            strt[i].index = i;
        }
        Comparator<str> comp = new Comparator<str>() {
            @Override
            public int compare(str s1, str s2) {
                return s1.compareTo(s2);
            }
        };
        Arrays.sort(strt, comp);

        for (int i = 0; i < len-1; ++i) {
            for (int j = i+1; j < len; ++j) {
                /*一*/
                long diffVal = (long)strt[j].value - (long)strt[i].value;
                if (diffVal > t) break;

                int diffIndx = strt[j].index - strt[i].index;
                /*二*/
                if (Math.abs(diffIndx) <= k) return true;
            }
        }

        return false;
    }
}
